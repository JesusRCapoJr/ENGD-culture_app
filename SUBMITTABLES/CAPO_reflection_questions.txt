Reflection Questions Test:

1. Compare your original draft and the final draft. What is the biggest difference between the two?
I was originally going to use a hashmap to store all of the grades for the gradetester and then calculate the total grade using the 
handler to go through all the value and average them. But then I decided that it would be more straightforward to just call the
takeQuiz handler each time for each quiz for the respective quizTester and simply take add the grade for each quiz at the moment and
then take the average. I did this as oppose to storing the grade value for each quiz in a hashmap in each quizTester object.

2. What did you have to change and why did you have to change it? If not, explain how you made your decisions in designing.
Something that I made a decision on was whether to make the variables in each object public and accesible by other objects or
to get methods that would return the private variable values. I chose to use the private method so that my code would be consistent with
using methods to access the values of private variables. There weren't any other major changes besides the ones I have described.

3. Did you re-use your code from ImplementingDesign1? How much did you have to change it if so? (If not, then please explain why)
I used some of the framework code as a baseline, such as the basic structure of the Quiz and Question objects and the instance variables.
This was to give myself something to work off of, but nearly everything changed to some extent.

4. Select one or more specific design principles and discuss how they relate to the your experience in designing and implementing the code for this assignment.
A principle I thought about during the design of this project was minimizing dependencies (4). I wanted to ensure that I would not have too many relationships between objects. I mainly implemented this by having the main dependencies stem from the QuizSimulatorMain and then having objects like the QuizTester objects access quizzes through the QuizSimulatorMain that passes Quiz objects as opposed to each QuizTester directly having access to each Quiz.